// <auto-generated />
using System;
using GreenDelight.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GreenDelight.Persistence.Migrations
{
    [DbContext(typeof(GreenDelightDbContext))]
    partial class GreenDelightDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GreenDelight.Domain.Concrete.About", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageFile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("Abouts");
                });

            modelBuilder.Entity("GreenDelight.Domain.Concrete.Adress", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Neighborhood")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("No")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("UserId");

                    b.ToTable("Adresses");
                });

            modelBuilder.Entity("GreenDelight.Domain.Concrete.Category", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("GreenDelight.Domain.Concrete.Comment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CommentDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("GreenDelight.Domain.Concrete.Contact", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("GreenDelight.Domain.Concrete.ErrorLog", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("ErrorCode")
                        .HasColumnType("int");

                    b.Property<string>("ErrorDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ErrorMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HttpMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StackTrace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserIpAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("ErrorLogs");
                });

            modelBuilder.Entity("GreenDelight.Domain.Concrete.Order", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("GreenDelight.Domain.Concrete.OrderItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("OrderID");

                    b.HasIndex("ProductID");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("GreenDelight.Domain.Concrete.Product", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrls")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("InStock")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Quantity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("CategoryID");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("GreenDelight.Domain.Concrete.TryEntities.Bolge", b =>
                {
                    b.Property<short>("BolgeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("bolge_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("BolgeId"));

                    b.Property<string>("BolgeAd")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("bolge_ad");

                    b.Property<string>("BolgeKisaAd")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("bolge_kisa_ad");

                    b.HasKey("BolgeId")
                        .HasName("bolge_pk");

                    b.ToTable("bolge", (string)null);
                });

            modelBuilder.Entity("GreenDelight.Domain.Concrete.TryEntities.GorevTur", b =>
                {
                    b.Property<short>("GorevTurId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("gorev_tur_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("GorevTurId"));

                    b.Property<string>("Tanim")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("tanim");

                    b.HasKey("GorevTurId")
                        .HasName("gorev_tur_pk");

                    b.HasIndex(new[] { "Tanim" }, "gorev_tur_un")
                        .IsUnique();

                    b.ToTable("gorev_tur", (string)null);
                });

            modelBuilder.Entity("GreenDelight.Domain.Concrete.TryEntities.Gorevlendirme", b =>
                {
                    b.Property<long>("GorevlendirmeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("gorevlendirme_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("GorevlendirmeId"));

                    b.Property<string>("Aciklama")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("aciklama");

                    b.Property<string>("BelgenetSayi")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("belgenet_sayi");

                    b.Property<DateTime?>("BelgenetTarih")
                        .HasColumnType("datetime")
                        .HasColumnName("belgenet_tarih");

                    b.Property<string>("BirimAdi")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("birim_adi");

                    b.Property<string>("BirimTur")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("birim_tur");

                    b.Property<short>("GorevTurId")
                        .HasColumnType("smallint")
                        .HasColumnName("gorev_tur_id");

                    b.Property<int>("GorevlendirilecekPersonelNo")
                        .HasColumnType("int")
                        .HasColumnName("gorevlendirilecek_personel_no");

                    b.Property<DateTime>("GorevlendirmeBaslangic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("gorevlendirme_baslangic")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("GorevlendirmeBirim")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("gorevlendirme_birim")
                        .HasComment("org_birim_kod");

                    b.Property<DateTime>("GorevlendirmeBitis")
                        .HasColumnType("datetime")
                        .HasColumnName("gorevlendirme_bitis");

                    b.Property<short>("GorevlendirmeTurId")
                        .HasColumnType("smallint")
                        .HasColumnName("gorevlendirme_tur_id");

                    b.Property<int?>("PersonelId")
                        .HasColumnType("int")
                        .HasColumnName("personel_id");

                    b.HasKey("GorevlendirmeId")
                        .HasName("gorevlendirme_pk");

                    b.HasIndex("GorevTurId");

                    b.HasIndex("GorevlendirmeTurId");

                    b.HasIndex("PersonelId");

                    b.ToTable("gorevlendirme", (string)null);
                });

            modelBuilder.Entity("GreenDelight.Domain.Concrete.TryEntities.GorevlendirmeTur", b =>
                {
                    b.Property<short>("GorevlendirmeTurId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("gorevlendirme_tur_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("GorevlendirmeTurId"));

                    b.Property<string>("Tanim")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("tanim");

                    b.HasKey("GorevlendirmeTurId")
                        .HasName("gorevlendirme_tur_pk");

                    b.ToTable("gorevlendirme_tur", (string)null);
                });

            modelBuilder.Entity("GreenDelight.Domain.Concrete.TryEntities.GunlukVardiyaIstasyonBirim", b =>
                {
                    b.Property<long>("GunlukVardiyaIstasyonBirimId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("gunluk_vardiya_istasyon_birim_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("GunlukVardiyaIstasyonBirimId"));

                    b.Property<int>("IstasyonBirimId")
                        .HasColumnType("int")
                        .HasColumnName("istasyon_birim_id");

                    b.Property<int>("PersonelId")
                        .HasColumnType("int")
                        .HasColumnName("personel_id");

                    b.Property<DateTime>("Tarih")
                        .HasColumnType("datetime")
                        .HasColumnName("tarih");

                    b.Property<int>("VardiyaId")
                        .HasColumnType("int")
                        .HasColumnName("vardiya_id");

                    b.HasKey("GunlukVardiyaIstasyonBirimId")
                        .HasName("gunluk_vardiya_istasyon_pkey_1");

                    b.HasIndex("PersonelId");

                    b.HasIndex(new[] { "IstasyonBirimId" }, "fki_fk_gunluk_vardiya_istasyon_birim_id");

                    b.HasIndex(new[] { "VardiyaId" }, "fki_fk_gunluk_vardiya_istasyon_vardiya_id");

                    b.ToTable("gunluk_vardiya_istasyon_birim", (string)null);
                });

            modelBuilder.Entity("GreenDelight.Domain.Concrete.TryEntities.GunlukVardiyaMasa", b =>
                {
                    b.Property<long>("GunlukVardiyaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("gunluk_vardiya_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("GunlukVardiyaId"));

                    b.Property<short>("MasaId")
                        .HasColumnType("smallint")
                        .HasColumnName("masa_id");

                    b.Property<int>("PersonelId")
                        .HasColumnType("int")
                        .HasColumnName("personel_id");

                    b.Property<DateTime>("Tarih")
                        .HasColumnType("datetime")
                        .HasColumnName("tarih");

                    b.Property<int>("VardiyaId")
                        .HasColumnType("int")
                        .HasColumnName("vardiya_id");

                    b.HasKey("GunlukVardiyaId")
                        .HasName("gunluk_vardiya_pkey");

                    b.HasIndex(new[] { "MasaId" }, "fki_fk_gunluk_vardiya_masa_id");

                    b.HasIndex(new[] { "VardiyaId" }, "fki_fk_gunluk_vardiya_masa_vardiya_id");

                    b.HasIndex(new[] { "PersonelId" }, "fki_fk_gunluk_vardiya_personel_id");

                    b.ToTable("gunluk_vardiya_masa", (string)null);
                });

            modelBuilder.Entity("GreenDelight.Domain.Concrete.TryEntities.Istasyon", b =>
                {
                    b.Property<int>("IstasyonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("istasyon_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IstasyonId"));

                    b.Property<DateTime?>("GuncellenmeTarihi")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("guncellenme_tarihi")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("IstasyonAd")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("istasyon_ad");

                    b.Property<string>("IstasyonKod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("istasyon_kod");

                    b.HasKey("IstasyonId")
                        .HasName("istasyon_pk");

                    b.ToTable("istasyon", (string)null);
                });

            modelBuilder.Entity("GreenDelight.Domain.Concrete.TryEntities.IstasyonBirim", b =>
                {
                    b.Property<int>("IstasyonBirimId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("istasyon_birim_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IstasyonBirimId"));

                    b.Property<short>("IstasyonBirimTurId")
                        .HasColumnType("smallint")
                        .HasColumnName("istasyon_birim_tur_id");

                    b.Property<int>("IstasyonId")
                        .HasColumnType("int")
                        .HasColumnName("istasyon_id");

                    b.HasKey("IstasyonBirimId")
                        .HasName("istasyon_birim_pk");

                    b.HasIndex(new[] { "IstasyonBirimTurId" }, "fki_fk_birim_istasyon_birim_tur_id");

                    b.HasIndex(new[] { "IstasyonId" }, "fki_fk_birim_istasyon_id");

                    b.ToTable("istasyon_birim", (string)null);
                });

            modelBuilder.Entity("GreenDelight.Domain.Concrete.TryEntities.IstasyonBirimTur", b =>
                {
                    b.Property<short>("IstasyonBirimTurId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("istasyon_birim_tur_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("IstasyonBirimTurId"));

                    b.Property<string>("IstasyonBirimTurTanim")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("istasyon_birim_tur_tanim");

                    b.HasKey("IstasyonBirimTurId")
                        .HasName("istasyon_birim_tur_pk");

                    b.ToTable("istasyon_birim_tur", (string)null);
                });

            modelBuilder.Entity("GreenDelight.Domain.Concrete.TryEntities.IstasyonDurum", b =>
                {
                    b.Property<int>("IstasyonDurumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("istasyon_durum_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IstasyonDurumId"));

                    b.Property<DateTime?>("BaslangicZamani")
                        .HasColumnType("datetime2")
                        .HasColumnName("baslangic_zamani");

                    b.Property<DateTime?>("BitisZamani")
                        .HasColumnType("datetime2")
                        .HasColumnName("bitis_zamani");

                    b.Property<DateTime?>("GecerlilikBaslangic")
                        .HasColumnType("datetime2")
                        .HasColumnName("gecerlilik_baslangic");

                    b.Property<DateTime?>("GecerlilikBitis")
                        .HasColumnType("datetime2")
                        .HasColumnName("gecerlilik_bitis");

                    b.Property<int>("IstasyonDurumTurId")
                        .HasColumnType("int")
                        .HasColumnName("istasyon_durum_tur_id");

                    b.Property<int>("IstasyonId")
                        .HasColumnType("int")
                        .HasColumnName("istasyon_id");

                    b.HasKey("IstasyonDurumId")
                        .HasName("istasyon_durum_pkey");

                    b.HasIndex("IstasyonDurumTurId");

                    b.HasIndex("IstasyonId");

                    b.ToTable("istasyon_durum", (string)null);
                });

            modelBuilder.Entity("GreenDelight.Domain.Concrete.TryEntities.IstasyonDurumTur", b =>
                {
                    b.Property<int>("IstasyonDurumTurId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("istasyon_durum_tur_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IstasyonDurumTurId"));

                    b.Property<string>("Tanim")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("tanim");

                    b.HasKey("IstasyonDurumTurId")
                        .HasName("istasyon_durum_tur_pkey");

                    b.ToTable("istasyon_durum_tur", (string)null);
                });

            modelBuilder.Entity("GreenDelight.Domain.Concrete.TryEntities.IzinTur", b =>
                {
                    b.Property<short>("IzinTurId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("izin_tur_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("IzinTurId"));

                    b.Property<string>("Aciklama")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("aciklama");

                    b.Property<string>("Tanim")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("tanim");

                    b.HasKey("IzinTurId")
                        .HasName("izin_tur_pk");

                    b.ToTable("izin_tur", (string)null);
                });

            modelBuilder.Entity("GreenDelight.Domain.Concrete.TryEntities.Masa", b =>
                {
                    b.Property<short>("MasaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("masa_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("MasaId"));

                    b.Property<bool>("Aktif")
                        .HasColumnType("bit")
                        .HasColumnName("aktif");

                    b.Property<bool?>("IsClone")
                        .HasColumnType("bit")
                        .HasColumnName("is_clone");

                    b.Property<short?>("ParentId")
                        .HasColumnType("smallint")
                        .HasColumnName("parent_id");

                    b.Property<string>("Renk")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("renk");

                    b.Property<string>("Tanim")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("tanim");

                    b.Property<short>("TrafikYonetimMerkeziId")
                        .HasColumnType("smallint")
                        .HasColumnName("trafik_yonetim_merkezi_id");

                    b.HasKey("MasaId")
                        .HasName("masa_pkey");

                    b.HasIndex(new[] { "ParentId" }, "fki_fk_masa_parent_id");

                    b.HasIndex(new[] { "TrafikYonetimMerkeziId" }, "fki_fk_masa_trafik_yonetim_merkezi_id");

                    b.ToTable("masa", (string)null);
                });

            modelBuilder.Entity("GreenDelight.Domain.Concrete.TryEntities.Mesai", b =>
                {
                    b.Property<long>("MesaiId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("mesai_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("MesaiId"));

                    b.Property<DateTime?>("MesaiBaslangic")
                        .HasColumnType("datetime2")
                        .HasColumnName("mesai_baslangic");

                    b.Property<DateTime?>("MesaiBitis")
                        .HasColumnType("datetime2")
                        .HasColumnName("mesai_bitis");

                    b.Property<short?>("MesaiTurId")
                        .HasColumnType("smallint")
                        .HasColumnName("mesai_tur_id");

                    b.Property<int?>("PersonelId")
                        .HasColumnType("int");

                    b.Property<int?>("PersonelNo")
                        .HasColumnType("int")
                        .HasColumnName("personel_no");

                    b.HasKey("MesaiId")
                        .HasName("mesai_pk");

                    b.HasIndex("MesaiTurId");

                    b.HasIndex("PersonelId");

                    b.ToTable("mesai", (string)null);
                });

            modelBuilder.Entity("GreenDelight.Domain.Concrete.TryEntities.MesaiTur", b =>
                {
                    b.Property<short>("MesaiTurId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("mesai_tur_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("MesaiTurId"));

                    b.Property<string>("Birim")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("birim");

                    b.Property<string>("MesaiTurTanim")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("mesai_tur_tanim");

                    b.HasKey("MesaiTurId")
                        .HasName("mesai_tur_pk");

                    b.ToTable("mesai_tur", (string)null);
                });

            modelBuilder.Entity("GreenDelight.Domain.Concrete.TryEntities.OrgBirim", b =>
                {
                    b.Property<long>("OrgBirimId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("org_birim_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("OrgBirimId"));

                    b.Property<string>("OrgBirimKod")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("org_birim_kod");

                    b.Property<string>("OrgBirimTanim")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("org_birim_tanim");

                    b.Property<string>("UstOrgBirimKod")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ust_org_birim_kod");

                    b.HasKey("OrgBirimId")
                        .HasName("org_birim_pk");

                    b.HasIndex(new[] { "OrgBirimKod" }, "org_birim_un")
                        .IsUnique();

                    b.ToTable("org_birim", (string)null);
                });

            modelBuilder.Entity("GreenDelight.Domain.Concrete.TryEntities.Personel", b =>
                {
                    b.Property<int>("PersonelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("personel_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonelId"));

                    b.Property<string>("Ad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ad");

                    b.Property<string>("OrgBirimKod")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("org_birim_kod");

                    b.Property<int>("PersonelNo")
                        .HasColumnType("int")
                        .HasColumnName("personel_no");

                    b.Property<string>("SicilNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("sicil_no");

                    b.Property<string>("Soyad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("soyad");

                    b.Property<long>("TcKimlikNo")
                        .HasColumnType("bigint")
                        .HasColumnName("tc_kimlik_no");

                    b.HasKey("PersonelId")
                        .HasName("personel_pk");

                    b.HasAlternateKey("PersonelNo");

                    b.HasIndex("OrgBirimKod");

                    b.HasIndex(new[] { "PersonelNo" }, "personel_un")
                        .IsUnique();

                    b.ToTable("personel", (string)null);
                });

            modelBuilder.Entity("GreenDelight.Domain.Concrete.TryEntities.PersonelIzin", b =>
                {
                    b.Property<int>("PersonelIzinId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("personel_izin_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonelIzinId"));

                    b.Property<string>("Aciklama")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("aciklama");

                    b.Property<DateTime>("IzinBaslangicTarihi")
                        .HasColumnType("datetime")
                        .HasColumnName("izin_baslangic_tarihi");

                    b.Property<DateTime?>("IzinBitisTarihi")
                        .HasColumnType("datetime")
                        .HasColumnName("izin_bitis_tarihi");

                    b.Property<short>("IzinTurId")
                        .HasColumnType("smallint")
                        .HasColumnName("izin_tur_id");

                    b.Property<int>("PersonelId")
                        .HasColumnType("int")
                        .HasColumnName("personel_id");

                    b.HasKey("PersonelIzinId")
                        .HasName("personel_izin_pk");

                    b.HasIndex("IzinTurId");

                    b.HasIndex("PersonelId");

                    b.ToTable("personel_izin", (string)null);
                });

            modelBuilder.Entity("GreenDelight.Domain.Concrete.TryEntities.TrafikYonetimMerkezi", b =>
                {
                    b.Property<short>("TrafikYonetimMerkeziId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("trafik_yonetim_merkezi_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("TrafikYonetimMerkeziId"));

                    b.Property<bool>("Aktif")
                        .HasColumnType("bit")
                        .HasColumnName("aktif");

                    b.Property<string>("BirimKodu")
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("birim_kodu");

                    b.Property<short>("BolgeId")
                        .HasColumnType("smallint")
                        .HasColumnName("bolge_id");

                    b.Property<string>("Tanim")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("tanim");

                    b.HasKey("TrafikYonetimMerkeziId")
                        .HasName("trafik_yonetim_merkezi_pkey");

                    b.HasIndex(new[] { "BolgeId" }, "fki_fk_trafik_yonetim_merkezi_bolge");

                    b.HasIndex(new[] { "BolgeId" }, "fki_fk_tym_bolge_id");

                    b.HasIndex(new[] { "BirimKodu" }, "trafik_yonetim_merkezi_un")
                        .IsUnique()
                        .HasFilter("[birim_kodu] IS NOT NULL");

                    b.ToTable("trafik_yonetim_merkezi", (string)null);
                });

            modelBuilder.Entity("GreenDelight.Domain.Concrete.TryEntities.Vardiya", b =>
                {
                    b.Property<int>("VardiyaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("vardiya_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VardiyaId"));

                    b.Property<TimeOnly>("BaslangicSaat")
                        .HasColumnType("time")
                        .HasColumnName("baslangic_saat");

                    b.Property<TimeOnly>("BitisSaat")
                        .HasColumnType("time")
                        .HasColumnName("bitis_saat");

                    b.Property<short?>("SiraNo")
                        .HasColumnType("smallint")
                        .HasColumnName("sira_no");

                    b.Property<int>("VardiyaSablonId")
                        .HasColumnType("int")
                        .HasColumnName("vardiya_sablon_id");

                    b.HasKey("VardiyaId")
                        .HasName("vardiya_pkey");

                    b.HasIndex(new[] { "VardiyaSablonId" }, "fki_fk_vardiya_vardiya_sablon_id");

                    b.ToTable("vardiya", (string)null);
                });

            modelBuilder.Entity("GreenDelight.Domain.Concrete.TryEntities.VardiyaSablonYer", b =>
                {
                    b.Property<int>("VardiyaSablonYerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("vardiya_sablon_yer_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VardiyaSablonYerId"));

                    b.Property<DateTime?>("GecerlilikBaslangic")
                        .HasColumnType("datetime")
                        .HasColumnName("gecerlilik_baslangic");

                    b.Property<DateTime?>("GecerlilikBitis")
                        .HasColumnType("datetime")
                        .HasColumnName("gecerlilik_bitis");

                    b.Property<int?>("IstasyonBirimId")
                        .HasColumnType("int")
                        .HasColumnName("istasyon_birim_id");

                    b.Property<short?>("MasaId")
                        .HasColumnType("smallint")
                        .HasColumnName("masa_id");

                    b.Property<short>("MaxVardiya")
                        .HasColumnType("smallint")
                        .HasColumnName("max_vardiya");

                    b.Property<string>("Tanim")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("tanim");

                    b.HasKey("VardiyaSablonYerId")
                        .HasName("vardiya_sablon_pkey");

                    b.HasIndex("IstasyonBirimId");

                    b.HasIndex("MasaId");

                    b.ToTable("vardiya_sablon_yer", (string)null);
                });

            modelBuilder.Entity("GreenDelight.Domain.Concrete.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("GreenDelight.Domain.Concrete.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("IdentityRole<Guid>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("IdentityUser<Guid>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GreenDelight.Domain.Concrete.Adress", b =>
                {
                    b.HasOne("GreenDelight.Domain.Concrete.User", "User")
                        .WithMany("Adresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GreenDelight.Domain.Concrete.Comment", b =>
                {
                    b.HasOne("GreenDelight.Domain.Concrete.Product", "Product")
                        .WithMany("Comments")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GreenDelight.Domain.Concrete.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GreenDelight.Domain.Concrete.Order", b =>
                {
                    b.HasOne("GreenDelight.Domain.Concrete.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GreenDelight.Domain.Concrete.OrderItem", b =>
                {
                    b.HasOne("GreenDelight.Domain.Concrete.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GreenDelight.Domain.Concrete.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("GreenDelight.Domain.Concrete.Product", b =>
                {
                    b.HasOne("GreenDelight.Domain.Concrete.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("GreenDelight.Domain.Concrete.TryEntities.Gorevlendirme", b =>
                {
                    b.HasOne("GreenDelight.Domain.Concrete.TryEntities.GorevTur", "GorevTur")
                        .WithMany("Gorevlendirme")
                        .HasForeignKey("GorevTurId")
                        .IsRequired()
                        .HasConstraintName("gorevlendirme_fk2");

                    b.HasOne("GreenDelight.Domain.Concrete.TryEntities.GorevlendirmeTur", "GorevlendirmeTur")
                        .WithMany("Gorevlendirme")
                        .HasForeignKey("GorevlendirmeTurId")
                        .IsRequired()
                        .HasConstraintName("gorevlendirme_fk");

                    b.HasOne("GreenDelight.Domain.Concrete.TryEntities.Personel", "Personel")
                        .WithMany("Gorevlendirme")
                        .HasForeignKey("PersonelId")
                        .HasConstraintName("gorevlendirme_personel_fk");

                    b.Navigation("GorevTur");

                    b.Navigation("GorevlendirmeTur");

                    b.Navigation("Personel");
                });

            modelBuilder.Entity("GreenDelight.Domain.Concrete.TryEntities.GunlukVardiyaIstasyonBirim", b =>
                {
                    b.HasOne("GreenDelight.Domain.Concrete.TryEntities.IstasyonBirim", "IstasyonBirim")
                        .WithMany("GunlukVardiyaIstasyonBirim")
                        .HasForeignKey("IstasyonBirimId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_gunluk_vardiya_istasyon_birim_id");

                    b.HasOne("GreenDelight.Domain.Concrete.TryEntities.Personel", "Personel")
                        .WithMany("GunlukVardiyaIstasyonBirim")
                        .HasForeignKey("PersonelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("gunluk_vardiya_istasyon_birim_fk");

                    b.HasOne("GreenDelight.Domain.Concrete.TryEntities.Vardiya", "Vardiya")
                        .WithMany("GunlukVardiyaIstasyonBirim")
                        .HasForeignKey("VardiyaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_gunluk_vardiya_istasyon_vardiya_id");

                    b.Navigation("IstasyonBirim");

                    b.Navigation("Personel");

                    b.Navigation("Vardiya");
                });

            modelBuilder.Entity("GreenDelight.Domain.Concrete.TryEntities.GunlukVardiyaMasa", b =>
                {
                    b.HasOne("GreenDelight.Domain.Concrete.TryEntities.Masa", "Masa")
                        .WithMany("GunlukVardiyaMasa")
                        .HasForeignKey("MasaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_gunluk_vardiya_masa_id");

                    b.HasOne("GreenDelight.Domain.Concrete.TryEntities.Personel", "Personel")
                        .WithMany("GunlukVardiyaMasa")
                        .HasForeignKey("PersonelId")
                        .IsRequired()
                        .HasConstraintName("gunluk_vardiya_masa_fk");

                    b.HasOne("GreenDelight.Domain.Concrete.TryEntities.Vardiya", "Vardiya")
                        .WithMany("GunlukVardiyaMasa")
                        .HasForeignKey("VardiyaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_gunluk_vardiya_masa_vardiya_id");

                    b.Navigation("Masa");

                    b.Navigation("Personel");

                    b.Navigation("Vardiya");
                });

            modelBuilder.Entity("GreenDelight.Domain.Concrete.TryEntities.IstasyonBirim", b =>
                {
                    b.HasOne("GreenDelight.Domain.Concrete.TryEntities.IstasyonBirimTur", "IstasyonBirimTur")
                        .WithMany("IstasyonBirim")
                        .HasForeignKey("IstasyonBirimTurId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_birim_istasyon_birim_tur_id");

                    b.HasOne("GreenDelight.Domain.Concrete.TryEntities.Istasyon", "Istasyon")
                        .WithMany("IstasyonBirim")
                        .HasForeignKey("IstasyonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_birim_istasyon_id");

                    b.Navigation("Istasyon");

                    b.Navigation("IstasyonBirimTur");
                });

            modelBuilder.Entity("GreenDelight.Domain.Concrete.TryEntities.IstasyonDurum", b =>
                {
                    b.HasOne("GreenDelight.Domain.Concrete.TryEntities.IstasyonDurumTur", "IstasyonDurumTur")
                        .WithMany("IstasyonDurum")
                        .HasForeignKey("IstasyonDurumTurId")
                        .IsRequired()
                        .HasConstraintName("istasyon_durum_fk");

                    b.HasOne("GreenDelight.Domain.Concrete.TryEntities.Istasyon", "Istasyon")
                        .WithMany("IstasyonDurum")
                        .HasForeignKey("IstasyonId")
                        .IsRequired()
                        .HasConstraintName("istasyon_istasyon_durum_fk");

                    b.Navigation("Istasyon");

                    b.Navigation("IstasyonDurumTur");
                });

            modelBuilder.Entity("GreenDelight.Domain.Concrete.TryEntities.Masa", b =>
                {
                    b.HasOne("GreenDelight.Domain.Concrete.TryEntities.Masa", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_masa_parent_id");

                    b.HasOne("GreenDelight.Domain.Concrete.TryEntities.TrafikYonetimMerkezi", "TrafikYonetimMerkezi")
                        .WithMany("Masa")
                        .HasForeignKey("TrafikYonetimMerkeziId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_masa_trafik_yonetim_merkezi_id");

                    b.Navigation("Parent");

                    b.Navigation("TrafikYonetimMerkezi");
                });

            modelBuilder.Entity("GreenDelight.Domain.Concrete.TryEntities.Mesai", b =>
                {
                    b.HasOne("GreenDelight.Domain.Concrete.TryEntities.MesaiTur", "MesaiTur")
                        .WithMany("Mesai")
                        .HasForeignKey("MesaiTurId")
                        .HasConstraintName("mesai_fk");

                    b.HasOne("GreenDelight.Domain.Concrete.TryEntities.Personel", null)
                        .WithMany("Mesai")
                        .HasForeignKey("PersonelId");

                    b.Navigation("MesaiTur");
                });

            modelBuilder.Entity("GreenDelight.Domain.Concrete.TryEntities.Personel", b =>
                {
                    b.HasOne("GreenDelight.Domain.Concrete.TryEntities.OrgBirim", "OrgBirimKodNavigation")
                        .WithMany("Personel")
                        .HasForeignKey("OrgBirimKod")
                        .HasPrincipalKey("OrgBirimKod")
                        .IsRequired()
                        .HasConstraintName("personel_fk");

                    b.Navigation("OrgBirimKodNavigation");
                });

            modelBuilder.Entity("GreenDelight.Domain.Concrete.TryEntities.PersonelIzin", b =>
                {
                    b.HasOne("GreenDelight.Domain.Concrete.TryEntities.IzinTur", "IzinTur")
                        .WithMany("PersonelIzin")
                        .HasForeignKey("IzinTurId")
                        .IsRequired()
                        .HasConstraintName("personel_izin_fk");

                    b.HasOne("GreenDelight.Domain.Concrete.TryEntities.Personel", "Personel")
                        .WithMany("PersonelIzin")
                        .HasForeignKey("PersonelId")
                        .IsRequired()
                        .HasConstraintName("personel_personel_izin_fk");

                    b.Navigation("IzinTur");

                    b.Navigation("Personel");
                });

            modelBuilder.Entity("GreenDelight.Domain.Concrete.TryEntities.TrafikYonetimMerkezi", b =>
                {
                    b.HasOne("GreenDelight.Domain.Concrete.TryEntities.Bolge", "Bolge")
                        .WithMany("TrafikYonetimMerkezi")
                        .HasForeignKey("BolgeId")
                        .IsRequired()
                        .HasConstraintName("trafik_yonetim_merkezi_fk");

                    b.Navigation("Bolge");
                });

            modelBuilder.Entity("GreenDelight.Domain.Concrete.TryEntities.Vardiya", b =>
                {
                    b.HasOne("GreenDelight.Domain.Concrete.TryEntities.VardiyaSablonYer", "VardiyaSablon")
                        .WithMany("Vardiya")
                        .HasForeignKey("VardiyaSablonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_vardiya_vardiya_sablon_id");

                    b.Navigation("VardiyaSablon");
                });

            modelBuilder.Entity("GreenDelight.Domain.Concrete.TryEntities.VardiyaSablonYer", b =>
                {
                    b.HasOne("GreenDelight.Domain.Concrete.TryEntities.IstasyonBirim", "IstasyonBirim")
                        .WithMany("VardiyaSablonYer")
                        .HasForeignKey("IstasyonBirimId")
                        .HasConstraintName("vardiya_sablon_yer_fk_1");

                    b.HasOne("GreenDelight.Domain.Concrete.TryEntities.Masa", "Masa")
                        .WithMany("VardiyaSablonYer")
                        .HasForeignKey("MasaId")
                        .HasConstraintName("vardiya_sablon_yer_fk");

                    b.Navigation("IstasyonBirim");

                    b.Navigation("Masa");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("GreenDelight.Domain.Concrete.UserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("GreenDelight.Domain.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("GreenDelight.Domain.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("GreenDelight.Domain.Concrete.UserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GreenDelight.Domain.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("GreenDelight.Domain.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GreenDelight.Domain.Concrete.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("GreenDelight.Domain.Concrete.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("GreenDelight.Domain.Concrete.Product", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("GreenDelight.Domain.Concrete.TryEntities.Bolge", b =>
                {
                    b.Navigation("TrafikYonetimMerkezi");
                });

            modelBuilder.Entity("GreenDelight.Domain.Concrete.TryEntities.GorevTur", b =>
                {
                    b.Navigation("Gorevlendirme");
                });

            modelBuilder.Entity("GreenDelight.Domain.Concrete.TryEntities.GorevlendirmeTur", b =>
                {
                    b.Navigation("Gorevlendirme");
                });

            modelBuilder.Entity("GreenDelight.Domain.Concrete.TryEntities.Istasyon", b =>
                {
                    b.Navigation("IstasyonBirim");

                    b.Navigation("IstasyonDurum");
                });

            modelBuilder.Entity("GreenDelight.Domain.Concrete.TryEntities.IstasyonBirim", b =>
                {
                    b.Navigation("GunlukVardiyaIstasyonBirim");

                    b.Navigation("VardiyaSablonYer");
                });

            modelBuilder.Entity("GreenDelight.Domain.Concrete.TryEntities.IstasyonBirimTur", b =>
                {
                    b.Navigation("IstasyonBirim");
                });

            modelBuilder.Entity("GreenDelight.Domain.Concrete.TryEntities.IstasyonDurumTur", b =>
                {
                    b.Navigation("IstasyonDurum");
                });

            modelBuilder.Entity("GreenDelight.Domain.Concrete.TryEntities.IzinTur", b =>
                {
                    b.Navigation("PersonelIzin");
                });

            modelBuilder.Entity("GreenDelight.Domain.Concrete.TryEntities.Masa", b =>
                {
                    b.Navigation("GunlukVardiyaMasa");

                    b.Navigation("InverseParent");

                    b.Navigation("VardiyaSablonYer");
                });

            modelBuilder.Entity("GreenDelight.Domain.Concrete.TryEntities.MesaiTur", b =>
                {
                    b.Navigation("Mesai");
                });

            modelBuilder.Entity("GreenDelight.Domain.Concrete.TryEntities.OrgBirim", b =>
                {
                    b.Navigation("Personel");
                });

            modelBuilder.Entity("GreenDelight.Domain.Concrete.TryEntities.Personel", b =>
                {
                    b.Navigation("Gorevlendirme");

                    b.Navigation("GunlukVardiyaIstasyonBirim");

                    b.Navigation("GunlukVardiyaMasa");

                    b.Navigation("Mesai");

                    b.Navigation("PersonelIzin");
                });

            modelBuilder.Entity("GreenDelight.Domain.Concrete.TryEntities.TrafikYonetimMerkezi", b =>
                {
                    b.Navigation("Masa");
                });

            modelBuilder.Entity("GreenDelight.Domain.Concrete.TryEntities.Vardiya", b =>
                {
                    b.Navigation("GunlukVardiyaIstasyonBirim");

                    b.Navigation("GunlukVardiyaMasa");
                });

            modelBuilder.Entity("GreenDelight.Domain.Concrete.TryEntities.VardiyaSablonYer", b =>
                {
                    b.Navigation("Vardiya");
                });

            modelBuilder.Entity("GreenDelight.Domain.Concrete.User", b =>
                {
                    b.Navigation("Adresses");

                    b.Navigation("Comments");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
